name: 0 Deploy Terraform üåé

concurrency: production

on:
  workflow_dispatch:
    inputs:
      terraform:
        description: 'Deploy Terraform OCI? ‚òÅÔ∏è'
        default: false
        required: true
        type: boolean
      terraform_dr:
        description: 'Deploy Terraform AWS? ‚òÅÔ∏è'
        default: false
        required: true
        type: boolean

defaults:
  run:
    working-directory: "infra"

env:
  KUBE_CONFIG: ${{secrets.KUBE_CONFIG}}
  OCI_CLI_USER: ${{ secrets.OCI_CLI_USER }}
  OCI_CLI_TENANCY: ${{ secrets.OCI_CLI_TENANCY }}
  OCI_CLI_FINGERPRINT: ${{ secrets.OCI_CLI_FINGERPRINT }}
  OCI_CLI_KEY_CONTENT: ${{ secrets.OCI_CLI_KEY_CONTENT }}
  OCI_CLI_REGION: ${{ secrets.OCI_CLI_REGION }}

jobs:

### Terraform plan
  Infra_plan:
    if: ${{ inputs.terraform == true }}
    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - uses: hashicorp/setup-terraform@v2    

    - name: Terraform fmt
      id: fmt
      run: terraform fmt -check
      continue-on-error: true

    - name: Terraform Init
      id: init
      run: terraform init

    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color

    - name: Terraform Plan
      id: plan
      run: terraform plan -no-color
      continue-on-error: true

### Terraform DR

  Infra_plan:
    if: ${{ inputs.terraform_dr == true }}
    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - uses: hashicorp/setup-terraform@v2 
    - uses: aws-actions/configure-aws-credentials@v1
      with:
        role-to-assume: arn:aws:iam::${{secrets.DEV_AWS_ACCOUNT_ID}}:role/github-role-skaffold-demo
        role-session-name: github-role-skaffold-demo
        aws-region: us-west-2
        
    - name: Terraform fmt
      id: fmt
      run: terraform fmt -check
      continue-on-error: true

    - name: Terraform Init
      id: init
      run: terraform init

    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color

    - name: Terraform Plan
      id: plan
      run: terraform plan -no-color
      continue-on-error: true


### Terraform apply
  Infra_deploy:
    needs: Infra_plan
    runs-on: ubuntu-22.04
    environment: 'infra'
    steps:
      - name: Deploying prometheus
        if: ${{ inputs.prometheus == true }}
        run: |
          kubectl create namespace monitoring || echo "Ya existe el namespace monitoring"
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
          helm repo update
          helm install prometheus prometheus-community/prometheus
          kubectl get svc -n monitoring
          echo "Editar el servicio prometheus-server y convertirlo en LoadBalancer"
      - name: Testing installations with Prometheus
        if: ${{ inputs.prometheus == true }}
        run: | 
          kubectl get pods -n monitoring
          kubectl get svc -n monitoring
        shell: bash
        
      - name: Deploying Promtail 
        if: ${{ inputs.promtail == true }}
        run: |
          curl -fsS https://raw.githubusercontent.com/grafana/loki/master/tools/promtail.sh | sh -s 256193 ${{ secrets.LOKI_TOKEN }} logs-prod3.grafana.net default | kubectl apply --namespace=default -f  -
      - name: Testing installations with Prometheus
        if: ${{ inputs.prometheus == true }}
        run: | 
          kubectl get pods
        shell: bash
